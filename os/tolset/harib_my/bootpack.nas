[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_font_A.0
	EXTERN	_io_load_eflags
	EXTERN	_io_cli
	EXTERN	_io_out8
	EXTERN	_io_store_eflags
	EXTERN	_io_hlt
[FILE "bootpack.c"]
[SECTION .data]
_font_A.0:
	DB	0
	DB	24
	DB	24
	DB	24
	DB	24
	DB	36
	DB	36
	DB	36
	DB	36
	DB	126
	DB	66
	DB	66
	DB	66
	DB	-25
	DB	0
	DB	0
[SECTION .text]
	GLOBAL	_HariMain
_HariMain:
	PUSH	EBP
	MOV	EBP,ESP
	CALL	_init_palette
	MOVSX	EDX,WORD [4086]
	MOVSX	EAX,WORD [4084]
	PUSH	EDX
	PUSH	EAX
	PUSH	DWORD [4088]
	CALL	_init_screen
	PUSH	_font_A.0
	PUSH	13
	PUSH	0
	PUSH	0
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	CALL	_putfont8
	ADD	ESP,36
	LEAVE
	JMP	_hlt_loop
[SECTION .data]
_table_rgb.1:
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	-1
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-58
	DB	-58
	DB	-58
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	-124
	DB	-124
	DB	-124
[SECTION .text]
	GLOBAL	_init_palette
_init_palette:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	_table_rgb.1
	PUSH	15
	PUSH	0
	CALL	_set_palette
	LEAVE
	RET
	GLOBAL	_putfont8
_putfont8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	XOR	EBX,EBX
	PUSH	ECX
	PUSH	ECX
	MOV	AL,BYTE [24+EBP]
	MOV	EDI,DWORD [16+EBP]
	MOV	BYTE [-17+EBP],AL
L16:
	MOV	ECX,DWORD [28+EBP]
	MOV	DL,BYTE [EBX+ECX*1]
	TEST	DL,DL
	JNS	L8
	MOV	EAX,DWORD [20+EBP]
	MOV	ESI,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	CL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [EAX+ESI*1],CL
L8:
	MOV	AL,DL
	AND	EAX,64
	TEST	AL,AL
	JE	L9
	MOV	EAX,DWORD [20+EBP]
	MOV	ESI,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	CL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [1+EAX+ESI*1],CL
L9:
	MOV	AL,DL
	AND	EAX,32
	TEST	AL,AL
	JE	L10
	MOV	EAX,DWORD [20+EBP]
	MOV	ESI,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	CL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [2+EAX+ESI*1],CL
L10:
	MOV	AL,DL
	AND	EAX,16
	TEST	AL,AL
	JE	L11
	MOV	EAX,DWORD [20+EBP]
	MOV	ESI,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	CL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [3+EAX+ESI*1],CL
L11:
	MOV	AL,DL
	AND	EAX,8
	TEST	AL,AL
	JE	L12
	MOV	EAX,DWORD [20+EBP]
	MOV	ESI,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	CL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [4+EAX+ESI*1],CL
L12:
	MOV	AL,DL
	AND	EAX,4
	TEST	AL,AL
	JE	L13
	MOV	EAX,DWORD [20+EBP]
	MOV	ESI,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	CL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [5+EAX+ESI*1],CL
L13:
	MOV	AL,DL
	AND	EAX,2
	TEST	AL,AL
	JE	L14
	MOV	EAX,DWORD [20+EBP]
	MOV	ESI,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	CL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [6+EAX+ESI*1],CL
L14:
	AND	EDX,1
	TEST	DL,DL
	JE	L6
	MOV	EAX,DWORD [20+EBP]
	MOV	ECX,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	DL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [7+EAX+ECX*1],DL
L6:
	INC	EBX
	CMP	EBX,15
	JLE	L16
	POP	EAX
	POP	EDX
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_init_screen
_init_screen:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,12
	MOV	EAX,DWORD [16+EBP]
	MOV	EDI,DWORD [12+EBP]
	SUB	EAX,29
	DEC	EDI
	PUSH	EAX
	PUSH	EDI
	PUSH	0
	PUSH	0
	PUSH	14
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,28
	PUSH	EAX
	PUSH	EDI
	PUSH	EAX
	PUSH	0
	PUSH	8
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EAX,DWORD [16+EBP]
	ADD	ESP,56
	SUB	EAX,27
	PUSH	EAX
	PUSH	EDI
	PUSH	EAX
	PUSH	0
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EAX,DWORD [16+EBP]
	DEC	EAX
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	PUSH	EDI
	SUB	EAX,26
	PUSH	EAX
	PUSH	0
	PUSH	8
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	ESI,DWORD [16+EBP]
	ADD	ESP,56
	SUB	ESI,24
	PUSH	ESI
	PUSH	59
	PUSH	ESI
	PUSH	3
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,4
	PUSH	EAX
	MOV	DWORD [-16+EBP],EAX
	PUSH	2
	PUSH	ESI
	PUSH	2
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	ADD	ESP,56
	PUSH	DWORD [-16+EBP]
	PUSH	59
	PUSH	DWORD [-16+EBP]
	PUSH	3
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,5
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	PUSH	59
	SUB	EAX,23
	PUSH	EAX
	MOV	DWORD [-20+EBP],EAX
	PUSH	59
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EAX,DWORD [16+EBP]
	ADD	ESP,56
	SUB	EAX,3
	MOV	DWORD [-24+EBP],EAX
	PUSH	EAX
	PUSH	59
	PUSH	EAX
	PUSH	2
	PUSH	0
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	PUSH	DWORD [-24+EBP]
	PUSH	60
	PUSH	ESI
	PUSH	60
	PUSH	0
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EDI,DWORD [12+EBP]
	ADD	ESP,56
	MOV	EBX,DWORD [12+EBP]
	SUB	EBX,4
	SUB	EDI,47
	PUSH	ESI
	PUSH	EBX
	PUSH	ESI
	PUSH	EDI
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	PUSH	DWORD [-16+EBP]
	PUSH	EDI
	PUSH	DWORD [-20+EBP]
	PUSH	EDI
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	ADD	ESP,56
	PUSH	DWORD [-24+EBP]
	PUSH	EBX
	PUSH	DWORD [-24+EBP]
	PUSH	EDI
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EAX,DWORD [12+EBP]
	PUSH	DWORD [-24+EBP]
	SUB	EAX,3
	PUSH	EAX
	PUSH	ESI
	PUSH	EAX
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_set_palette
_set_palette:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EAX
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	MOV	EBX,DWORD [8+EBP]
	MOV	DWORD [-16+EBP],EAX
	MOV	EDI,DWORD [16+EBP]
	MOV	ESI,EBX
	CALL	_io_load_eflags
	MOV	DWORD [-20+EBP],EAX
	CALL	_io_cli
	PUSH	EBX
	PUSH	968
	CALL	_io_out8
	CMP	ESI,DWORD [-16+EBP]
	POP	EBX
	POP	EAX
	JLE	L25
L27:
	MOV	EAX,DWORD [-20+EBP]
	MOV	DWORD [8+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_io_store_eflags
L25:
	MOVSX	AX,BYTE [EDI]
	MOV	BL,4
	INC	ESI
	IDIV	BL
	MOVSX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	MOVSX	AX,BYTE [1+EDI]
	IDIV	BL
	MOVSX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	MOVSX	AX,BYTE [2+EDI]
	IDIV	BL
	MOVSX	EAX,AL
	PUSH	EAX
	ADD	EDI,3
	PUSH	969
	CALL	_io_out8
	ADD	ESP,24
	CMP	ESI,DWORD [-16+EBP]
	JLE	L25
	JMP	L27
	GLOBAL	_boxfill8
_boxfill8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,12
	MOV	EDI,DWORD [28+EBP]
	MOV	AL,BYTE [16+EBP]
	MOV	EBX,DWORD [20+EBP]
	MOV	ESI,DWORD [32+EBP]
	MOV	BYTE [-13+EBP],AL
	CMP	EBX,EDI
	JG	L40
L38:
	MOV	ECX,DWORD [24+EBP]
	CMP	ECX,ESI
	JGE	L42
	MOV	EDX,DWORD [12+EBP]
	MOV	EAX,DWORD [8+EBP]
	IMUL	EDX,ECX
	ADD	EAX,EBX
	MOV	DWORD [-20+EBP],EAX
	MOV	EAX,EDX
	MOV	EDX,ESI
	ADD	EAX,DWORD [-20+EBP]
	SUB	EDX,ECX
	MOV	ECX,EDX
L37:
	MOV	DL,BYTE [-13+EBP]
	MOV	BYTE [EAX],DL
	ADD	EAX,DWORD [12+EBP]
	DEC	ECX
	JNE	L37
L42:
	INC	EBX
	CMP	EBX,EDI
	JLE	L38
L40:
	ADD	ESP,12
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_hlt_loop
_hlt_loop:
	PUSH	EBP
	MOV	EBP,ESP
L44:
	CALL	_io_hlt
	JMP	L44
