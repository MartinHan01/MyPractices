[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_sprintf
	EXTERN	_hankaku
	EXTERN	_io_load_eflags
	EXTERN	_io_cli
	EXTERN	_io_out8
	EXTERN	_io_store_eflags
	EXTERN	_io_hlt
	EXTERN	_load_gdtr
	EXTERN	_load_idtr
[FILE "bootpack.c"]
[SECTION .data]
LC0:
	DB	"ABC 123",0x00
LC1:
	DB	"MartinHan",0x00
LC2:
	DB	"scrnx = %d",0x00
[SECTION .text]
	GLOBAL	_HariMain
_HariMain:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	EBX,2
	SUB	ESP,312
	CALL	_init_gdtidt
	CALL	_init_palette
	MOVSX	ECX,WORD [4084]
	MOVSX	EAX,WORD [4086]
	LEA	EDI,DWORD [-16+ECX]
	MOV	DWORD [-320+EBP],EAX
	MOV	EAX,EDI
	MOV	ESI,DWORD [-320+EBP]
	CDQ
	IDIV	EBX
	SUB	ESI,44
	MOV	EDI,EAX
	MOV	EAX,ESI
	CDQ
	IDIV	EBX
	PUSH	DWORD [-320+EBP]
	PUSH	ECX
	MOV	ESI,EAX
	PUSH	DWORD [4088]
	LEA	EBX,DWORD [-60+EBP]
	CALL	_init_screen
	PUSH	LC0
	PUSH	11
	PUSH	8
	PUSH	8
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	CALL	_putfont8_asc
	ADD	ESP,36
	PUSH	LC1
	PUSH	11
	PUSH	24
	PUSH	8
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	CALL	_putfont8_asc
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	LC2
	PUSH	EBX
	CALL	_sprintf
	ADD	ESP,36
	PUSH	EBX
	LEA	EBX,DWORD [-316+EBP]
	PUSH	11
	PUSH	40
	PUSH	8
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	CALL	_putfont8_asc
	PUSH	14
	PUSH	EBX
	CALL	_init_mouse_cursor8
	ADD	ESP,32
	PUSH	16
	PUSH	EBX
	PUSH	ESI
	PUSH	EDI
	PUSH	16
	PUSH	16
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	CALL	_putblock8_8
	ADD	ESP,32
	CALL	_hlt_loop
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
[SECTION .data]
_table_rgb.0:
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	-1
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-58
	DB	-58
	DB	-58
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	-124
	DB	-124
	DB	-124
[SECTION .text]
	GLOBAL	_init_palette
_init_palette:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	_table_rgb.0
	PUSH	15
	PUSH	0
	CALL	_set_palette
	LEAVE
	RET
	GLOBAL	_putfont8_asc
_putfont8_asc:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EAX
	MOV	EBX,DWORD [28+EBP]
	MOV	AL,BYTE [24+EBP]
	MOV	BYTE [-13+EBP],AL
	MOV	ESI,DWORD [16+EBP]
	MOV	EDI,DWORD [20+EBP]
	CMP	BYTE [EBX],0
	JNE	L8
L10:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L8:
	MOVZX	EAX,BYTE [EBX]
	SAL	EAX,4
	INC	EBX
	ADD	EAX,_hankaku
	PUSH	EAX
	MOVZX	EAX,BYTE [-13+EBP]
	PUSH	EAX
	PUSH	EDI
	PUSH	ESI
	ADD	ESI,8
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putfont8
	ADD	ESP,24
	CMP	BYTE [EBX],0
	JNE	L8
	JMP	L10
	GLOBAL	_putfont8
_putfont8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EBX
	PUSH	EBX
	XOR	EBX,EBX
	MOV	AL,BYTE [24+EBP]
	MOV	EDI,DWORD [16+EBP]
	MOV	BYTE [-17+EBP],AL
L24:
	MOV	ECX,DWORD [28+EBP]
	MOV	DL,BYTE [EBX+ECX*1]
	TEST	DL,DL
	JNS	L16
	MOV	EAX,DWORD [20+EBP]
	MOV	ESI,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	CL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [EAX+ESI*1],CL
L16:
	MOV	AL,DL
	AND	EAX,64
	TEST	AL,AL
	JE	L17
	MOV	EAX,DWORD [20+EBP]
	MOV	ESI,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	CL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [1+EAX+ESI*1],CL
L17:
	MOV	AL,DL
	AND	EAX,32
	TEST	AL,AL
	JE	L18
	MOV	EAX,DWORD [20+EBP]
	MOV	ESI,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	CL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [2+EAX+ESI*1],CL
L18:
	MOV	AL,DL
	AND	EAX,16
	TEST	AL,AL
	JE	L19
	MOV	EAX,DWORD [20+EBP]
	MOV	ESI,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	CL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [3+EAX+ESI*1],CL
L19:
	MOV	AL,DL
	AND	EAX,8
	TEST	AL,AL
	JE	L20
	MOV	EAX,DWORD [20+EBP]
	MOV	ESI,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	CL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [4+EAX+ESI*1],CL
L20:
	MOV	AL,DL
	AND	EAX,4
	TEST	AL,AL
	JE	L21
	MOV	EAX,DWORD [20+EBP]
	MOV	ESI,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	CL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [5+EAX+ESI*1],CL
L21:
	MOV	AL,DL
	AND	EAX,2
	TEST	AL,AL
	JE	L22
	MOV	EAX,DWORD [20+EBP]
	MOV	ESI,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	CL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [6+EAX+ESI*1],CL
L22:
	AND	EDX,1
	TEST	DL,DL
	JE	L14
	MOV	EAX,DWORD [20+EBP]
	MOV	ECX,DWORD [8+EBP]
	ADD	EAX,EBX
	MOV	DL,BYTE [-17+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDI
	MOV	BYTE [7+EAX+ECX*1],DL
L14:
	INC	EBX
	CMP	EBX,15
	JLE	L24
	POP	EDX
	POP	ECX
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_init_screen
_init_screen:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,12
	MOV	EAX,DWORD [16+EBP]
	MOV	EDI,DWORD [12+EBP]
	SUB	EAX,29
	DEC	EDI
	PUSH	EAX
	PUSH	EDI
	PUSH	0
	PUSH	0
	PUSH	14
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,28
	PUSH	EAX
	PUSH	EDI
	PUSH	EAX
	PUSH	0
	PUSH	8
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EAX,DWORD [16+EBP]
	ADD	ESP,56
	SUB	EAX,27
	PUSH	EAX
	PUSH	EDI
	PUSH	EAX
	PUSH	0
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EAX,DWORD [16+EBP]
	DEC	EAX
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	PUSH	EDI
	SUB	EAX,26
	PUSH	EAX
	PUSH	0
	PUSH	8
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	ESI,DWORD [16+EBP]
	ADD	ESP,56
	SUB	ESI,24
	PUSH	ESI
	PUSH	59
	PUSH	ESI
	PUSH	3
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,4
	PUSH	EAX
	MOV	DWORD [-16+EBP],EAX
	PUSH	2
	PUSH	ESI
	PUSH	2
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	ADD	ESP,56
	PUSH	DWORD [-16+EBP]
	PUSH	59
	PUSH	DWORD [-16+EBP]
	PUSH	3
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,5
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	PUSH	59
	SUB	EAX,23
	PUSH	EAX
	MOV	DWORD [-20+EBP],EAX
	PUSH	59
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EAX,DWORD [16+EBP]
	ADD	ESP,56
	SUB	EAX,3
	MOV	DWORD [-24+EBP],EAX
	PUSH	EAX
	PUSH	59
	PUSH	EAX
	PUSH	2
	PUSH	0
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	PUSH	DWORD [-24+EBP]
	PUSH	60
	PUSH	ESI
	PUSH	60
	PUSH	0
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EDI,DWORD [12+EBP]
	ADD	ESP,56
	MOV	EBX,DWORD [12+EBP]
	SUB	EBX,4
	SUB	EDI,47
	PUSH	ESI
	PUSH	EBX
	PUSH	ESI
	PUSH	EDI
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	PUSH	DWORD [-16+EBP]
	PUSH	EDI
	PUSH	DWORD [-20+EBP]
	PUSH	EDI
	PUSH	15
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	ADD	ESP,56
	PUSH	DWORD [-24+EBP]
	PUSH	EBX
	PUSH	DWORD [-24+EBP]
	PUSH	EDI
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	MOV	EAX,DWORD [12+EBP]
	PUSH	DWORD [-24+EBP]
	SUB	EAX,3
	PUSH	EAX
	PUSH	ESI
	PUSH	EAX
	PUSH	7
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_boxfill8
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_set_palette
_set_palette:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	ECX
	PUSH	ECX
	MOV	EAX,DWORD [12+EBP]
	MOV	EBX,DWORD [8+EBP]
	MOV	DWORD [-16+EBP],EAX
	MOV	EDI,DWORD [16+EBP]
	MOV	ESI,EBX
	CALL	_io_load_eflags
	MOV	DWORD [-20+EBP],EAX
	CALL	_io_cli
	PUSH	EBX
	PUSH	968
	CALL	_io_out8
	CMP	EBX,DWORD [-16+EBP]
	POP	EAX
	POP	EDX
	JLE	L33
L35:
	MOV	EAX,DWORD [-20+EBP]
	MOV	DWORD [8+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_io_store_eflags
L33:
	MOVSX	AX,BYTE [EDI]
	MOV	BL,4
	INC	ESI
	IDIV	BL
	MOVSX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	MOVSX	AX,BYTE [1+EDI]
	IDIV	BL
	MOVSX	EAX,AL
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	MOVSX	AX,BYTE [2+EDI]
	IDIV	BL
	MOVSX	EAX,AL
	PUSH	EAX
	ADD	EDI,3
	PUSH	969
	CALL	_io_out8
	ADD	ESP,24
	CMP	ESI,DWORD [-16+EBP]
	JLE	L33
	JMP	L35
	GLOBAL	_boxfill8
_boxfill8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,12
	MOV	EDI,DWORD [28+EBP]
	MOV	AL,BYTE [16+EBP]
	MOV	EBX,DWORD [20+EBP]
	MOV	ESI,DWORD [32+EBP]
	MOV	BYTE [-13+EBP],AL
	CMP	EBX,EDI
	JG	L48
L46:
	MOV	ECX,DWORD [24+EBP]
	CMP	ECX,ESI
	JGE	L50
	MOV	EDX,DWORD [12+EBP]
	MOV	EAX,DWORD [8+EBP]
	IMUL	EDX,ECX
	ADD	EAX,EBX
	MOV	DWORD [-20+EBP],EAX
	MOV	EAX,EDX
	MOV	EDX,ESI
	ADD	EAX,DWORD [-20+EBP]
	SUB	EDX,ECX
	MOV	ECX,EDX
L45:
	MOV	DL,BYTE [-13+EBP]
	MOV	BYTE [EAX],DL
	ADD	EAX,DWORD [12+EBP]
	DEC	ECX
	JNE	L45
L50:
	INC	EBX
	CMP	EBX,EDI
	JLE	L46
L48:
	ADD	ESP,12
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_hlt_loop
_hlt_loop:
	PUSH	EBP
	MOV	EBP,ESP
L52:
	CALL	_io_hlt
	JMP	L52
[SECTION .data]
_cursor.1:
	DB	"**************.."
	DB	"*OOOOOOOOOOO*..."
	DB	"*OOOOOOOOOO*...."
	DB	"*OOOOOOOOO*....."
	DB	"*OOOOOOOO*......"
	DB	"*OOOOOOO*......."
	DB	"*OOOOOOO*......."
	DB	"*OOOOOOOO*......"
	DB	"*OOOO**OOO*....."
	DB	"*OOO*..*OOO*...."
	DB	"*OO*....*OOO*..."
	DB	"*O*......*OOO*.."
	DB	"**........*OOO*."
	DB	"*..........*OOO*"
	DB	"............*OO*"
	DB	".............***"
[SECTION .text]
	GLOBAL	_init_mouse_cursor8
_init_mouse_cursor8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	EDI,EDI
	PUSH	EBX
	PUSH	ESI
	XOR	EBX,EBX
	MOV	AL,BYTE [12+EBP]
	MOV	ESI,DWORD [8+EBP]
	MOV	BYTE [-13+EBP],AL
L66:
	XOR	EDX,EDX
L65:
	LEA	EAX,DWORD [EDX+EDI*1]
	CMP	BYTE [_cursor.1+EAX],42
	JE	L71
L62:
	CMP	BYTE [_cursor.1+EAX],79
	JE	L72
L63:
	CMP	BYTE [_cursor.1+EAX],46
	JE	L73
L60:
	INC	EDX
	CMP	EDX,15
	JLE	L65
	INC	EBX
	ADD	EDI,16
	CMP	EBX,15
	JLE	L66
	POP	EBX
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L73:
	MOV	CL,BYTE [-13+EBP]
	MOV	BYTE [EAX+ESI*1],CL
	JMP	L60
L72:
	MOV	BYTE [EAX+ESI*1],7
	JMP	L63
L71:
	MOV	BYTE [EAX+ESI*1],0
	JMP	L62
	GLOBAL	_putblock8_8
_putblock8_8:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	ESI,ESI
	PUSH	EBX
	SUB	ESP,12
	CMP	ESI,DWORD [20+EBP]
	JGE	L86
	XOR	EDI,EDI
L84:
	XOR	EBX,EBX
	CMP	EBX,DWORD [16+EBP]
	JGE	L88
	MOV	EAX,DWORD [32+EBP]
	ADD	EAX,EDI
	MOV	DWORD [-20+EBP],EAX
L83:
	MOV	EAX,DWORD [28+EBP]
	MOV	EDX,DWORD [24+EBP]
	ADD	EAX,ESI
	ADD	EDX,EBX
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,EDX
	MOV	ECX,DWORD [8+EBP]
	MOV	EDX,DWORD [-20+EBP]
	INC	EBX
	MOV	DL,BYTE [EDX]
	MOV	BYTE [EAX+ECX*1],DL
	INC	DWORD [-20+EBP]
	CMP	EBX,DWORD [16+EBP]
	JL	L83
L88:
	INC	ESI
	ADD	EDI,DWORD [36+EBP]
	CMP	ESI,DWORD [20+EBP]
	JL	L84
L86:
	ADD	ESP,12
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_init_gdtidt
_init_gdtidt:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,2555904
	MOV	EBX,8191
L94:
	PUSH	0
	PUSH	0
	PUSH	0
	PUSH	ESI
	ADD	ESI,8
	CALL	_set_segmdesc
	ADD	ESP,16
	DEC	EBX
	JNS	L94
	PUSH	16530
	MOV	ESI,2553856
	PUSH	0
	MOV	EBX,255
	PUSH	-1
	PUSH	2555912
	CALL	_set_segmdesc
	PUSH	16538
	PUSH	2621440
	PUSH	524287
	PUSH	2555920
	CALL	_set_segmdesc
	ADD	ESP,32
	PUSH	2555904
	PUSH	65535
	CALL	_load_gdtr
	POP	EAX
	POP	EDX
L99:
	PUSH	0
	PUSH	0
	PUSH	0
	PUSH	ESI
	ADD	ESI,8
	CALL	_set_gatedesc
	ADD	ESP,16
	DEC	EBX
	JNS	L99
	PUSH	2553856
	PUSH	2047
	CALL	_load_idtr
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
	GLOBAL	_set_segmdesc
_set_segmdesc:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EDX,DWORD [12+EBP]
	MOV	ECX,DWORD [16+EBP]
	MOV	EBX,DWORD [8+EBP]
	MOV	EAX,DWORD [20+EBP]
	CMP	EDX,65535
	JBE	L105
	SHR	EDX,12
	OR	EAX,32768
L105:
	MOV	WORD [EBX],DX
	MOV	BYTE [5+EBX],AL
	SHR	EDX,16
	SAR	EAX,8
	AND	EDX,15
	MOV	WORD [2+EBX],CX
	AND	EAX,-16
	SAR	ECX,16
	OR	EDX,EAX
	MOV	BYTE [4+EBX],CL
	MOV	BYTE [6+EBX],DL
	SAR	ECX,8
	MOV	BYTE [7+EBX],CL
	POP	EBX
	POP	EBP
	RET
	GLOBAL	_set_gatedesc
_set_gatedesc:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EDX,DWORD [8+EBP]
	MOV	ECX,DWORD [12+EBP]
	MOVZX	EAX,CL
	MOV	WORD [EDX],AX
	MOV	EBX,DWORD [20+EBP]
	SAR	ECX,16
	MOV	EAX,DWORD [16+EBP]
	MOV	WORD [2+EDX],AX
	MOV	BYTE [5+EDX],BL
	MOV	WORD [6+EDX],CX
	MOV	EAX,EBX
	SAR	EAX,8
	MOV	BYTE [4+EDX],AL
	POP	EBX
	POP	EBP
	RET
