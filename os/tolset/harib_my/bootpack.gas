	.file	"bootpack.c"
	.data
LC0:
	.ascii "ABC123456789\0"
	.text
	.balign 2
.globl _HariMain
	.def	_HariMain;	.scl	2;	.type	32;	.endef
_HariMain:
	pushl	%ebp
	movl	%esp, %ebp
	call	_init_palette
	movswl	4086,%eax
	movswl	4084,%edx
	pushl	%eax
	pushl	%edx
	pushl	4088
	call	_init_screen
	pushl	$LC0
	pushl	$11
	pushl	$8
	pushl	$8
	movswl	4084,%eax
	pushl	%eax
	pushl	4088
	call	_putfont8_asc
	addl	$36, %esp
	pushl	$_hankaku+1040
	pushl	$12
	pushl	$100
	pushl	$100
	movswl	4084,%eax
	pushl	%eax
	pushl	4088
	call	_putfont8
	addl	$24, %esp
	leave
	jmp	_hlt_loop
	.data
_table_rgb.0:
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	0
	.byte	-1
	.byte	-1
	.byte	0
	.byte	0
	.byte	0
	.byte	-1
	.byte	-1
	.byte	0
	.byte	-1
	.byte	0
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-1
	.byte	-58
	.byte	-58
	.byte	-58
	.byte	-124
	.byte	0
	.byte	0
	.byte	0
	.byte	-124
	.byte	0
	.byte	-124
	.byte	-124
	.byte	0
	.byte	0
	.byte	0
	.byte	-124
	.byte	-124
	.byte	0
	.byte	-124
	.byte	0
	.byte	-124
	.byte	-124
	.byte	-124
	.byte	-124
	.byte	-124
	.text
	.balign 2
.globl _init_palette
	.def	_init_palette;	.scl	2;	.type	32;	.endef
_init_palette:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	$_table_rgb.0
	pushl	$15
	pushl	$0
	call	_set_palette
	leave
	ret
	.balign 2
.globl _putfont8_asc
	.def	_putfont8_asc;	.scl	2;	.type	32;	.endef
_putfont8_asc:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%eax
	movl	28(%ebp), %ebx
	movb	24(%ebp), %al
	movb	%al, -13(%ebp)
	movl	16(%ebp), %esi
	movl	20(%ebp), %edi
	cmpb	$0, (%ebx)
	jne	L8
L10:
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
L8:
	movzbl	(%ebx), %eax
	sall	$4, %eax
	incl	%ebx
	addl	$_hankaku, %eax
	pushl	%eax
	movzbl	-13(%ebp), %eax
	pushl	%eax
	pushl	%edi
	pushl	%esi
	addl	$8, %esi
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_putfont8
	addl	$24, %esp
	cmpb	$0, (%ebx)
	jne	L8
	jmp	L10
	.balign 2
.globl _putfont8
	.def	_putfont8;	.scl	2;	.type	32;	.endef
_putfont8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%ebx
	pushl	%ebx
	xorl	%ebx, %ebx
	movb	24(%ebp), %al
	movl	16(%ebp), %edi
	movb	%al, -17(%ebp)
L24:
	movl	28(%ebp), %ecx
	movb	(%ebx,%ecx), %dl
	testb	%dl, %dl
	jns	L16
	movl	20(%ebp), %eax
	movl	8(%ebp), %esi
	addl	%ebx, %eax
	movb	-17(%ebp), %cl
	imull	12(%ebp), %eax
	addl	%edi, %eax
	movb	%cl, (%eax,%esi)
L16:
	movb	%dl, %al
	andl	$64, %eax
	testb	%al, %al
	je	L17
	movl	20(%ebp), %eax
	movl	8(%ebp), %esi
	addl	%ebx, %eax
	movb	-17(%ebp), %cl
	imull	12(%ebp), %eax
	addl	%edi, %eax
	movb	%cl, 1(%eax,%esi)
L17:
	movb	%dl, %al
	andl	$32, %eax
	testb	%al, %al
	je	L18
	movl	20(%ebp), %eax
	movl	8(%ebp), %esi
	addl	%ebx, %eax
	movb	-17(%ebp), %cl
	imull	12(%ebp), %eax
	addl	%edi, %eax
	movb	%cl, 2(%eax,%esi)
L18:
	movb	%dl, %al
	andl	$16, %eax
	testb	%al, %al
	je	L19
	movl	20(%ebp), %eax
	movl	8(%ebp), %esi
	addl	%ebx, %eax
	movb	-17(%ebp), %cl
	imull	12(%ebp), %eax
	addl	%edi, %eax
	movb	%cl, 3(%eax,%esi)
L19:
	movb	%dl, %al
	andl	$8, %eax
	testb	%al, %al
	je	L20
	movl	20(%ebp), %eax
	movl	8(%ebp), %esi
	addl	%ebx, %eax
	movb	-17(%ebp), %cl
	imull	12(%ebp), %eax
	addl	%edi, %eax
	movb	%cl, 4(%eax,%esi)
L20:
	movb	%dl, %al
	andl	$4, %eax
	testb	%al, %al
	je	L21
	movl	20(%ebp), %eax
	movl	8(%ebp), %esi
	addl	%ebx, %eax
	movb	-17(%ebp), %cl
	imull	12(%ebp), %eax
	addl	%edi, %eax
	movb	%cl, 5(%eax,%esi)
L21:
	movb	%dl, %al
	andl	$2, %eax
	testb	%al, %al
	je	L22
	movl	20(%ebp), %eax
	movl	8(%ebp), %esi
	addl	%ebx, %eax
	movb	-17(%ebp), %cl
	imull	12(%ebp), %eax
	addl	%edi, %eax
	movb	%cl, 6(%eax,%esi)
L22:
	andl	$1, %edx
	testb	%dl, %dl
	je	L14
	movl	20(%ebp), %eax
	movl	8(%ebp), %ecx
	addl	%ebx, %eax
	movb	-17(%ebp), %dl
	imull	12(%ebp), %eax
	addl	%edi, %eax
	movb	%dl, 7(%eax,%ecx)
L14:
	incl	%ebx
	cmpl	$15, %ebx
	jle	L24
	popl	%edx
	popl	%ecx
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _init_screen
	.def	_init_screen;	.scl	2;	.type	32;	.endef
_init_screen:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$12, %esp
	movl	16(%ebp), %eax
	movl	12(%ebp), %edi
	subl	$29, %eax
	decl	%edi
	pushl	%eax
	pushl	%edi
	pushl	$0
	pushl	$0
	pushl	$14
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	movl	16(%ebp), %eax
	subl	$28, %eax
	pushl	%eax
	pushl	%edi
	pushl	%eax
	pushl	$0
	pushl	$8
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	movl	16(%ebp), %eax
	addl	$56, %esp
	subl	$27, %eax
	pushl	%eax
	pushl	%edi
	pushl	%eax
	pushl	$0
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	movl	16(%ebp), %eax
	decl	%eax
	pushl	%eax
	movl	16(%ebp), %eax
	pushl	%edi
	subl	$26, %eax
	pushl	%eax
	pushl	$0
	pushl	$8
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	movl	16(%ebp), %esi
	addl	$56, %esp
	subl	$24, %esi
	pushl	%esi
	pushl	$59
	pushl	%esi
	pushl	$3
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	movl	16(%ebp), %eax
	subl	$4, %eax
	pushl	%eax
	movl	%eax, -16(%ebp)
	pushl	$2
	pushl	%esi
	pushl	$2
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$56, %esp
	pushl	-16(%ebp)
	pushl	$59
	pushl	-16(%ebp)
	pushl	$3
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	movl	16(%ebp), %eax
	subl	$5, %eax
	pushl	%eax
	movl	16(%ebp), %eax
	pushl	$59
	subl	$23, %eax
	pushl	%eax
	movl	%eax, -20(%ebp)
	pushl	$59
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	movl	16(%ebp), %eax
	addl	$56, %esp
	subl	$3, %eax
	movl	%eax, -24(%ebp)
	pushl	%eax
	pushl	$59
	pushl	%eax
	pushl	$2
	pushl	$0
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	pushl	-24(%ebp)
	pushl	$60
	pushl	%esi
	pushl	$60
	pushl	$0
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	movl	12(%ebp), %edi
	addl	$56, %esp
	movl	12(%ebp), %ebx
	subl	$4, %ebx
	subl	$47, %edi
	pushl	%esi
	pushl	%ebx
	pushl	%esi
	pushl	%edi
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	pushl	-16(%ebp)
	pushl	%edi
	pushl	-20(%ebp)
	pushl	%edi
	pushl	$15
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	addl	$56, %esp
	pushl	-24(%ebp)
	pushl	%ebx
	pushl	-24(%ebp)
	pushl	%edi
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	movl	12(%ebp), %eax
	pushl	-24(%ebp)
	subl	$3, %eax
	pushl	%eax
	pushl	%esi
	pushl	%eax
	pushl	$7
	pushl	12(%ebp)
	pushl	8(%ebp)
	call	_boxfill8
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _set_palette
	.def	_set_palette;	.scl	2;	.type	32;	.endef
_set_palette:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	pushl	%ecx
	pushl	%ecx
	movl	12(%ebp), %eax
	movl	8(%ebp), %ebx
	movl	%eax, -16(%ebp)
	movl	16(%ebp), %edi
	movl	%ebx, %esi
	call	_io_load_eflags
	movl	%eax, -20(%ebp)
	call	_io_cli
	pushl	%ebx
	pushl	$968
	call	_io_out8
	cmpl	-16(%ebp), %ebx
	popl	%eax
	popl	%edx
	jle	L33
L35:
	movl	-20(%ebp), %eax
	movl	%eax, 8(%ebp)
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	jmp	_io_store_eflags
L33:
	movsbw	(%edi),%ax
	movb	$4, %bl
	incl	%esi
	idivb	%bl
	movsbl	%al,%eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	movsbw	1(%edi),%ax
	idivb	%bl
	movsbl	%al,%eax
	pushl	%eax
	pushl	$969
	call	_io_out8
	movsbw	2(%edi),%ax
	idivb	%bl
	movsbl	%al,%eax
	pushl	%eax
	addl	$3, %edi
	pushl	$969
	call	_io_out8
	addl	$24, %esp
	cmpl	-16(%ebp), %esi
	jle	L33
	jmp	L35
	.balign 2
.globl _boxfill8
	.def	_boxfill8;	.scl	2;	.type	32;	.endef
_boxfill8:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$12, %esp
	movl	28(%ebp), %edi
	movb	16(%ebp), %al
	movl	20(%ebp), %ebx
	movl	32(%ebp), %esi
	movb	%al, -13(%ebp)
	cmpl	%edi, %ebx
	jg	L48
L46:
	movl	24(%ebp), %ecx
	cmpl	%esi, %ecx
	jge	L50
	movl	12(%ebp), %edx
	movl	8(%ebp), %eax
	imull	%ecx, %edx
	addl	%ebx, %eax
	movl	%eax, -20(%ebp)
	movl	%edx, %eax
	movl	%esi, %edx
	addl	-20(%ebp), %eax
	subl	%ecx, %edx
	movl	%edx, %ecx
L45:
	movb	-13(%ebp), %dl
	movb	%dl, (%eax)
	addl	12(%ebp), %eax
	decl	%ecx
	jne	L45
L50:
	incl	%ebx
	cmpl	%edi, %ebx
	jle	L46
L48:
	addl	$12, %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.balign 2
.globl _hlt_loop
	.def	_hlt_loop;	.scl	2;	.type	32;	.endef
_hlt_loop:
	pushl	%ebp
	movl	%esp, %ebp
L52:
	call	_io_hlt
	jmp	L52
	.def	_io_hlt;	.scl	2;	.type	32;	.endef
	.def	_io_store_eflags;	.scl	2;	.type	32;	.endef
	.def	_io_out8;	.scl	2;	.type	32;	.endef
	.def	_io_cli;	.scl	2;	.type	32;	.endef
	.def	_io_load_eflags;	.scl	2;	.type	32;	.endef
	.def	_boxfill8;	.scl	2;	.type	32;	.endef
	.def	_set_palette;	.scl	2;	.type	32;	.endef
	.def	_hlt_loop;	.scl	2;	.type	32;	.endef
	.def	_putfont8;	.scl	2;	.type	32;	.endef
	.def	_putfont8_asc;	.scl	2;	.type	32;	.endef
	.def	_init_screen;	.scl	2;	.type	32;	.endef
	.def	_init_palette;	.scl	2;	.type	32;	.endef
